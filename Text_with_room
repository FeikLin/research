import bpy
from math import radians
import random as rd

# clean up wall paper
def clear_collection(collection):
    for item in collection:
        collection.remove(item)

def clean_up():
    clear_collection(bpy.data.images)
    clear_collection(bpy.data.materials)
    clear_collection(bpy.data.textures)
    
# add new material
def new_tex(top_path,fname):
    img = bpy.data.images.load(filepath = (top_path + fname + '.jpg'))  # load image
    mat = bpy.data.materials.new(name = fname)
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes["Principled BSDF"]
    texImage = mat.node_tree.nodes.new("ShaderNodeTexImage")
    texImage.image = img
    mat.node_tree.links.new(bsdf.inputs['Base Color'], texImage.outputs['Color'])
    return mat

# add the material to the object
def link_mat_to_floor(obj, mat):
    if obj.data.materials:
        obj.data.materials[0] = mat
    else:
        obj.data.materials.append(mat)
    
# random texture
def get_random_texs(type, n):
    geo_texs_pool= ['51_geometric', '75_wave', '100_round','hv','rsz_58_c','square', '31_vintage', '61_striped']
    nat_texs_pool= ['cladding', 'flagstone', 'pebble_dash', 'rock_stone', '48_plywood', 'tanziana', '54_cherry_wood', '92_old_bricks']
    if type == 'geo':
        texs = rd.sample(geo_texs_pool, n)
    elif type == 'nat':
        texs = rd.sample(nat_texs_pool, n)
    return texs

# set up texture for the environment
def set_texture(type, n):
    in_top_path = 'Users/FeikaiLin/Desktop/research/tex/gray_rsz/'
    
    clean_up()
    
    # add floor texture
    floor_mat = new_tex(in_top_path, 'old_raw_wood')
    for obj in bpy.context.scene.objects:
        if obj.name.startswith('floor'):
            link_mat_to_floor(obj, floor_mat)
    
    # add wall texture
    texs = get_random_texs(type, n)
    print(texs)
    mats = []
    for i in range(n):
        mats.append(new_tex(in_top_path, texs[i]))
        
    for plane in bpy.context.scene.objects:
        if plane.name.startswith('plane') and plane.name.find('.') == -1:
            if plane.name.startswith('plane2') or plane.name.startswith('plane6') or plane.name.startswith('plane8'):
                link_mat_to_floor(plane, mats[2]) # plane 2, 6, 8
            else: 
                link_mat_to_floor(plane, mats[0]) # plane 1, 3, 4, 5, 7
        elif plane.name.startswith('plane1') or plane.name.startswith('plane5') or plane.name.startswith('plane7'):
            link_mat_to_floor(plane, mats[1])  # plane 1.1, 5.1, 7.1
        elif plane.name.startswith('plane2') or plane.name.startswith('plane6') or plane.name.startswith('plane8'):
            link_mat_to_floor(plane, mats[3])  # plane 2.1, 6.1, 8.1
        elif plane.name.startswith('plane3.1') or plane.name.startswith('plane4.1'):
            link_mat_to_floor(plane, mats[0])  # plane 3.1, 4.1
        elif plane.name.startswith('plane3.2') or plane.name.startswith('plane3.3'):
            link_mat_to_floor(plane, mats[1])  # plane 3.2, 3.3
        elif plane.name.startswith('plane3'):
            link_mat_to_floor(plane, mats[2])  # plane 3.4, 3.5
        elif plane.name.startswith('plane4.2'):
            link_mat_to_floor(plane, mats[1])  # plane 4.2
        elif plane.name.startswith('plane4'):
            link_mat_to_floor(plane, mats[2])  # plane 4.3-4.6
            
    # add door
    door_mat = new_tex(in_top_path,'door')
    for obj in bpy.context.scene.objects:
        if obj.name == 'door':
            link_mat_to_floor(obj, door_mat) 
    
    # add rough glass
    mat_glass = bpy.data.materials.new(name = 'rough_glass')
    mat_glass.use_nodes = True
    mat_glass.use_screen_refraction = True
    bsdf = mat_glass.node_tree.nodes["Principled BSDF"]
    bsdf.inputs['Roughness'].default_value = 0.2
    bsdf.inputs['Transmission'].default_value = 0.8
    color = mat_glass.node_tree.nodes.new("ShaderNodeRGB")
    color.outputs[0].default_value = (1, 1, 1, 1)
    mat_glass.node_tree.links.new(bsdf.inputs['Base Color'], color.outputs['Color'])
    
    for obj in bpy.context.scene.objects:
        if obj.name.startswith('glass'):
            link_mat_to_floor(obj, mat_glass)
    
    return texs
    
# render animation 
def render(i, local, out_name):
    out_top_path = "Users/FeikaiLin/Desktop/research/stimuli/lens_5_linear/"
    bpy.data.scenes[0].frame_start = i
    bpy.data.scenes[0].frame_end = i+48
    bpy.data.scenes[0].render.image_settings.file_format = 'AVI_JPEG'
    time_name = '%d-'%i + '%d'%(i+48)
    bpy.data.scenes[0].render.filepath = out_top_path + local + '/' + out_name + time_name + '.avi'
    bpy.ops.render.render(animation=True)

# generate clips for each run
def each_run(tex_type, tex_num, run):
    texs = set_texture(tex_type, tex_num)
    conditions = ['open_dw_%d_'%run, 'turn_nd_%d_'%run ,'turn_d_%d_'%run,'glass_dw_%d_'%run,'door_dw_%d_'%run] #
    local = 'run%d'%run #
    for j in range(len(conditions)):
        if j == 1:
            continue
        else:
            filename = conditions[j]
            render(j*100, local, filename)
            render(j*100+48, local, filename)
    return texs

def main(tex_type, tex_num, run_num):
    texs_list = []
    for i in range(run_num):
        run = 11 + i # # since i already have run1-7, i want to start from run8
        texs_list.append(each_run(tex_type, tex_num, run))
    print(texs_list)
    
main('nat', 4, 1)